// ===== DASHBOARD.JS - –î–∞—à–±–æ—Ä–¥ =====

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞
async function loadDashboard(userRole = null) {
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞...');
    
    try {
        const adminToken = window.storage ? window.storage.getAdminToken() : null;
        console.log('üîë –¢–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∞:', adminToken ? '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        
        if (!adminToken) {
            console.warn('‚ö†Ô∏è –¢–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞—à–±–æ—Ä–¥–∞...');
            setTimeout(() => loadDashboard(userRole), 500);
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ localStorage, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞
        if (!userRole) {
            userRole = window.storage ? window.storage.getUserRole() : localStorage.getItem('userRole');
            console.log('üìã –†–æ–ª—å –∏–∑ localStorage:', userRole);
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–æ–ª—å —Å—Ä–∞–∑—É
        const roleName = typeof userRole === 'object' ? userRole.name : userRole;
        console.log('üé≠ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ä–æ–ª—å:', roleName);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ API –ø—Ä–æ—Ñ–∏–ª—å
        try {
            const profile = await window.api.fetchData('/api/v1/users/profile');
            const actualRole = profile?.data?.role?.name || profile?.role?.name;
            if (actualRole && actualRole !== roleName) {
                console.warn(`‚ö†Ô∏è –†–æ–ª—å –≤ localStorage (${roleName}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ä–æ–ª—å—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (${actualRole}). –û–±–Ω–æ–≤–ª—è–µ–º...`);
                if (window.storage && window.storage.setUserRole) {
                    window.storage.setUserRole(actualRole);
                } else {
                    localStorage.setItem('userRole', actualRole);
                }
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—à–±–æ—Ä–¥ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ä–æ–ª—å—é
                return loadDashboard(actualRole);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ä–æ–ª–∏:', error.message);
        }
        
        let products = { data: [] };
        let users = { data: { users: [] } };
        let orders = { data: { orders: [] } };
        
        try {
            let productsEndpoint = CONFIG.API.ENDPOINTS.PRODUCTS.LIST;
            if (roleName === 'super_admin' || roleName === 'admin') {
                console.log('üëë –ê–¥–º–∏–Ω –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞');
            } else if (roleName === 'shop_owner') {
                console.log('üè™ –í–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞');
            } else {
                console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å:', roleName);
            }
            
            products = await window.api.fetchData(productsEndpoint);
            console.log('‚úÖ –¢–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', products.products?.length || 0);
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error.message);
        }
        
        try {
            if (roleName === 'super_admin' || roleName === 'admin') {
                users = await window.api.fetchData(CONFIG.API.ENDPOINTS.USERS.LIST);
                console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', users.data?.users?.length || 0);
            } else if (roleName === 'shop_owner') {
                users = await window.api.fetchData('/api/v1/shop/customers/');
                console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', users.data?.customers?.length || 0);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/–∫–ª–∏–µ–Ω—Ç–æ–≤:', error.message);
        }
        
        try {
            if (roleName === 'super_admin' || roleName === 'admin') {
                orders = await window.api.fetchData(CONFIG.API.ENDPOINTS.ORDERS.LIST);
                console.log('üì° –û—Ç–≤–µ—Ç API –∑–∞–∫–∞–∑–æ–≤ (–∞–¥–º–∏–Ω):', orders);
            } else if (roleName === 'shop_owner') {
                orders = await window.api.fetchData('/api/v1/shop/orders/');
                console.log('üì° –û—Ç–≤–µ—Ç API –∑–∞–∫–∞–∑–æ–≤ (–≤–ª–∞–¥–µ–ª–µ—Ü):', orders);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error.message);
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –æ—Ç–≤–µ—Ç–∞
        const productsList = products?.products || products?.data?.products || [];
        const usersList = (roleName === 'super_admin' || roleName === 'admin') 
            ? (users?.data?.users || users?.users || [])
            : (users?.data?.customers || users?.customers || []);
        const ordersList = orders?.data?.orders || orders?.orders || orders?.data || [];
        
        const totalProducts = productsList.length;
        const totalUsers = usersList.length;
        const totalOrders = ordersList.length;
        const revenue = ordersList.reduce((sum, order) => sum + (order.total_amount || 0), 0) || 0;
        
        console.log('üìä –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', { 
            products: totalProducts, 
            users: totalUsers, 
            orders: totalOrders, 
            revenue,
            ordersList: ordersList.slice(0, 5)
        });
        
        console.log('üéØ –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏:', { products: totalProducts, users: totalUsers, orders: totalOrders, revenue });
        
        animateCounter('total-products', totalProducts);
        animateCounter('total-users', totalUsers);
        animateCounter('total-orders', totalOrders);
        animateRevenue('total-revenue', revenue);
        
        displayRecentOrders(ordersList.slice(0, 5));
        
        console.log('‚úÖ –î–∞—à–±–æ—Ä–¥ –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
        if (window.ui && window.ui.showMessage) {
            window.ui.showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞: ' + error.message, 'error');
        }
    }
}

// –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
function animateCounter(elementId, targetValue) {
    const element = document.getElementById(elementId);
    if (!element) {
        console.warn(`‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç ${elementId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞`);
        return;
    }
    
    const startValue = 0;
    const duration = 1000;
    const startTime = performance.now();
    
    function updateCounter(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        const easeProgress = 1 - Math.pow(1 - progress, 4);
        const currentValue = Math.floor(startValue + (targetValue - startValue) * easeProgress);
        
        element.textContent = currentValue.toLocaleString();
        
        if (progress < 1) {
            requestAnimationFrame(updateCounter);
        } else {
            element.textContent = targetValue.toLocaleString();
        }
    }
    
    requestAnimationFrame(updateCounter);
}

// –ê–Ω–∏–º–∞—Ü–∏—è –¥–æ—Ö–æ–¥–∞
function animateRevenue(elementId, targetValue) {
    const element = document.getElementById(elementId);
    if (!element) return;
    
    const startValue = 0;
    const duration = 1000;
    const startTime = performance.now();
    
    function updateRevenue(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        const easeProgress = 1 - Math.pow(1 - progress, 4);
        const currentValue = Math.floor(startValue + (targetValue - startValue) * easeProgress);
        
        element.textContent = `‚ÇΩ${currentValue.toLocaleString()}`;
        
        if (progress < 1) {
            requestAnimationFrame(updateRevenue);
        } else {
            element.textContent = `‚ÇΩ${targetValue.toLocaleString()}`;
        }
    }
    
    requestAnimationFrame(updateRevenue);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤
function displayRecentOrders(orders) {
    const container = document.getElementById('recent-orders');
    
    if (!container) {
        console.warn('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä recent-orders –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    if (orders.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-shopping-cart"></i>
                <p>–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
                <small>–ö–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –∑–∞–∫–∞–∑—ã, –æ–Ω–∏ –æ—Ç–æ–±—Ä–∞–∑—è—Ç—Å—è –∑–¥–µ—Å—å</small>
            </div>
        `;
        return;
    }
    
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
    function getStatusClass(status) {
        switch (status?.toLowerCase()) {
            case 'completed':
            case '–∑–∞–≤–µ—Ä—à–µ–Ω':
                return 'status-completed';
            case 'processing':
            case '–æ–±—Ä–∞–±–æ—Ç–∫–∞':
                return 'status-processing';
            case 'shipped':
            case '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω':
                return 'status-shipped';
            case 'cancelled':
            case '–æ—Ç–º–µ–Ω–µ–Ω':
                return 'status-cancelled';
            default:
                return 'status-new';
        }
    }
    
    function getStatusIcon(status) {
        switch (status?.toLowerCase()) {
            case 'completed':
            case '–∑–∞–≤–µ—Ä—à–µ–Ω':
                return 'fa-check-circle';
            case 'processing':
            case '–æ–±—Ä–∞–±–æ—Ç–∫–∞':
                return 'fa-clock';
            case 'shipped':
            case '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω':
                return 'fa-shipping-fast';
            case 'cancelled':
            case '–æ—Ç–º–µ–Ω–µ–Ω':
                return 'fa-times-circle';
            default:
                return 'fa-circle';
        }
    }
    
    const table = `
        <table>
            <thead>
                <tr>
                    <th><i class="fas fa-hashtag"></i> ID</th>
                    <th><i class="fas fa-user"></i> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
                    <th><i class="fas fa-info-circle"></i> –°—Ç–∞—Ç—É—Å</th>
                    <th><i class="fas fa-ruble-sign"></i> –°—É–º–º–∞</th>
                    <th><i class="fas fa-calendar"></i> –î–∞—Ç–∞</th>
                    <th><i class="fas fa-cog"></i> –î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${orders.map(order => `
                    <tr>
                        <td><code>${order.id?.substring(0, 8)}...</code></td>
                        <td>
                            <div class="user-info">
                                <i class="fas fa-user-circle"></i>
                                <span>${order.user_id?.substring(0, 8)}...</span>
                            </div>
                        </td>
                        <td>
                            <span class="status-badge ${getStatusClass(order.status)}">
                                <i class="fas ${getStatusIcon(order.status)}"></i>
                                ${order.status || '–ù–æ–≤—ã–π'}
                            </span>
                        </td>
                        <td class="amount">
                            <strong>‚ÇΩ${(order.total_amount || 0).toLocaleString()}</strong>
                        </td>
                        <td>
                            <div class="date-info">
                                <div class="date">${new Date(order.created_at).toLocaleDateString()}</div>
                                <div class="time">${new Date(order.created_at).toLocaleTimeString()}</div>
                            </div>
                        </td>
                        <td>
                            <button class="action-btn view" onclick="window.orders && window.orders.viewOrderDetails ? window.orders.viewOrderDetails('${order.id}') : (typeof viewOrderDetails === 'function' ? viewOrderDetails('${order.id}') : alert('–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'))" title="–ü—Ä–æ—Å–º–æ—Ç—Ä">
                                <i class="fas fa-eye"></i>
                            </button>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
    
    container.innerHTML = table;
}

// –≠–∫—Å–ø–æ—Ä—Ç
window.dashboard = {
    loadDashboard,
    displayRecentOrders,
    animateCounter,
    animateRevenue
};


