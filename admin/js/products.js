// ===== PRODUCTS.JS - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ =====

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ storage
function getVariations() {
    return window.storage ? window.storage.getVariations() : (typeof variations !== 'undefined' ? variations : []);
}

function setVariations(vars) {
    if (window.storage) {
        window.storage.setVariations(vars);
    } else if (typeof variations !== 'undefined') {
        variations = vars;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
async function loadProducts() {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–≤–∞—Ä–æ–≤...');
    
    const container = document.getElementById('products-table');
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        if (container) {
            container.innerHTML = `
                <div class="table-container">
                    <h3><i class="fas fa-box"></i> –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</h3>
                    <div class="text-center" style="padding: 40px 20px;">
                        <div class="loading" style="margin: 0 auto 20px;">
                            <i class="fas fa-spinner fa-spin" style="font-size: 32px; color: #667eea;"></i>
                        </div>
                        <p style="color: #666; font-size: 14px;">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</p>
                    </div>
                </div>
            `;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        const userRole = localStorage.getItem('userRole') || 'admin';
        let endpoint;
        let title = '–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤';
        
        if (userRole === 'super_admin' || userRole === 'admin') {
            endpoint = CONFIG.API.ENDPOINTS.PRODUCTS.LIST;
            title = '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–ê–¥–º–∏–Ω)';
            console.log('üëë –ê–¥–º–∏–Ω –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã');
        } else {
            endpoint = CONFIG.API.ENDPOINTS.PRODUCTS.LIST;
            title = '–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã';
            console.log('üè™ –í–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ ownerId');
        }
        
        console.log(`üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç: ${endpoint}`);
        
        const response = await window.api.fetchData(endpoint);
        console.log('üì° –û—Ç–≤–µ—Ç API —Ç–æ–≤–∞—Ä–æ–≤:', response);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞
        let products = [];
        
        if (response.data && response.data.products && Array.isArray(response.data.products)) {
            products = response.data.products;
        } else if (response.products && Array.isArray(response.products)) {
            products = response.products;
        } else if (response.data && Array.isArray(response.data)) {
            products = response.data;
        } else if (Array.isArray(response)) {
            products = response;
        } else {
            products = [];
        }
        
        console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ API`);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ ownerId –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –º–∞–≥–∞–∑–∏–Ω–æ–≤
        if (userRole === 'shop_owner' || userRole === 'user') {
            const userData = JSON.parse(localStorage.getItem('userData'));
            const userId = userData?.id;
            
            if (userId) {
                const originalCount = products.length;
                products = products.filter(product => product.ownerId === userId);
                console.log(`‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: ${originalCount} ‚Üí ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if (window.storage && window.storage.setAllProducts) {
            window.storage.setAllProducts(products);
        } else {
            allProducts = products;
        }
        
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä products-table –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if (container) {
            const titleElement = container.querySelector('h3');
            if (titleElement) {
                titleElement.innerHTML = `<i class="fas fa-box"></i> ${title}`;
            }
        }
        
        displayProducts(products);
        
        if (products.length > 0) {
            const roleText = userRole === 'shop_owner' ? '–≤–∞—à–∏—Ö' : '';
            if (window.ui && window.ui.showMessage) {
                window.ui.showMessage(`–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${products.length} ${roleText} —Ç–æ–≤–∞—Ä–æ–≤`, 'success');
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
        
        if (container) {
            container.innerHTML = `
                <div class="table-container">
                    <h3><i class="fas fa-box"></i> –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</h3>
                    <div class="text-center" style="padding: 40px 20px;">
                        <div style="font-size: 48px; color: #e74c3c; margin-bottom: 20px;">
                            <i class="fas fa-exclamation-triangle"></i>
                        </div>
                        <h4 style="color: #e74c3c; margin-bottom: 10px;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h4>
                        <p style="color: #666; font-size: 14px; margin-bottom: 20px;">${error.message}</p>
                        <button class="btn btn-primary" onclick="window.products.loadProducts()">
                            <i class="fas fa-redo"></i> –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                        </button>
                    </div>
                </div>
            `;
        }
        
        if (window.ui && window.ui.showMessage) {
            window.ui.showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: ' + error.message, 'error');
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
async function refreshProductsList() {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...');
    
    const productsTab = document.getElementById('products');
    if (!productsTab || !productsTab.classList.contains('active')) {
        showTab('products');
        await new Promise(resolve => setTimeout(resolve, 150));
    }
    
    try {
        await loadProducts();
        console.log('‚úÖ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:', error);
        if (window.ui && window.ui.showMessage) {
            window.ui.showMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤: ' + error.message, 'error');
        }
        return false;
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
function displayProducts(products) {
    console.log('üîÑ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤:', products);
    
    const container = document.getElementById('products-table');
    
    if (!container) {
        console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä products-table –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }
    
    if (!Array.isArray(products)) {
        products = [];
    }
    
    if (products.length === 0) {
        container.innerHTML = `
            <div class="table-container">
                <h3><i class="fas fa-box"></i> –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</h3>
                <div class="text-center" style="padding: 60px 20px;">
                    <div style="font-size: 64px; color: #ddd; margin-bottom: 20px;">
                        <i class="fas fa-box-open"></i>
                    </div>
                    <h4 style="color: #666; margin-bottom: 10px;">–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</h4>
                    <p style="color: #999; font-size: 14px;">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É</p>
                </div>
            </div>
        `;
        return;
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª–∞
    function getGenderColor(gender) {
        switch (gender?.toLowerCase()) {
            case 'male': return 'linear-gradient(135deg, #4ecdc4, #44a08d)';
            case 'female': return 'linear-gradient(135deg, #f093fb, #f5576c)';
            default: return 'linear-gradient(135deg, #45b7d1, #96ceb4)';
        }
    }
    
    function getGenderIcon(gender) {
        switch (gender?.toLowerCase()) {
            case 'male': return 'fa-mars';
            case 'female': return 'fa-venus';
            default: return 'fa-venus-mars';
        }
    }
    
    function getGenderText(gender) {
        switch (gender?.toLowerCase()) {
            case 'male': return '–ú—É–∂—Å–∫–æ–π';
            case 'female': return '–ñ–µ–Ω—Å–∫–∏–π';
            default: return '–£–Ω–∏—Å–µ–∫—Å';
        }
    }
    
    const table = `
        <div class="table-container">
            <h3><i class="fas fa-box"></i> –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</h3>
            <div class="table-responsive">
                <table class="data-table">
                    <thead>
                        <tr>
                            <th><i class="fas fa-tag"></i> –¢–æ–≤–∞—Ä</th>
                            <th><i class="fas fa-building"></i> –ë—Ä–µ–Ω–¥</th>
                            <th><i class="fas fa-venus-mars"></i> –ü–æ–ª</th>
                            <th><i class="fas fa-folder"></i> –ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
                            <th><i class="fas fa-layer-group"></i> –í–∞—Ä–∏–∞—Ü–∏–∏</th>
                            <th><i class="fas fa-calendar"></i> –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</th>
                            <th><i class="fas fa-cogs"></i> –î–µ–π—Å—Ç–≤–∏—è</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${products.map((product, index) => `
                            <tr style="animation-delay: ${index * 0.1}s;">
                                <td data-label="–¢–æ–≤–∞—Ä">
                                    <div style="display: flex; align-items: center; gap: 12px;">
                                        <div style="width: 50px; height: 50px; border-radius: 12px; background: linear-gradient(135deg, #667eea, #764ba2); display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; font-size: 20px; box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);">
                                            <i class="fas fa-box"></i>
                                        </div>
                                        <div>
                                            <div style="font-weight: 700; color: #333; font-size: 16px; margin-bottom: 4px;">${product.name}</div>
                                            <div style="font-size: 12px; color: #888; font-family: monospace; background: #f8f9fa; padding: 2px 6px; border-radius: 4px;">${product.id?.substring(0, 8)}...</div>
                                        </div>
                                    </div>
                                </td>
                                <td data-label="–ë—Ä–µ–Ω–¥">${product.brand || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                                <td data-label="–ü–æ–ª">
                                    <span class="badge" style="background: ${getGenderColor(product.gender)}; font-size: 12px; padding: 8px 12px;">
                                        <i class="fas ${getGenderIcon(product.gender)}"></i>
                                        ${getGenderText(product.gender)}
                                    </span>
                                </td>
                                <td data-label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è">${product.category?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}</td>
                                <td data-label="–í–∞—Ä–∏–∞—Ü–∏–∏">
                                    <span class="badge" style="background: linear-gradient(135deg, #45b7d1, #96ceb4); color: white; font-size: 12px; padding: 8px 12px;">
                                        ${product.variations?.length || 0} –≤–∞—Ä–∏–∞—Ü–∏–π
                                    </span>
                                </td>
                                <td data-label="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è">${product.createdAt ? new Date(product.createdAt).toLocaleDateString('ru-RU') : 'N/A'}</td>
                                <td data-label="–î–µ–π—Å—Ç–≤–∏—è">
                                    <div style="display: flex; gap: 8px; justify-content: center;">
                                        <button class="btn-sm btn-info" onclick="viewProductVariations('${product.id}')" title="–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—Ä–∏–∞—Ü–∏–π">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <button class="btn-sm btn-primary" onclick="window.products.editProduct('${product.id}')" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn-sm btn-danger" onclick="window.products.deleteProduct('${product.id}')" title="–£–¥–∞–ª–∏—Ç—å">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            </div>
        </div>
    `;
    
    container.innerHTML = table;
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
async function editProduct(id) {
    console.log('üîÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å ID:', id);
    await loadProductData(id);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
async function loadProductData(id) {
    try {
        const response = await window.api.fetchData(`/api/v1/products/${id}`);
        
        let product;
        if (response.product) {
            product = response.product;
        } else if (response.data) {
            product = response.data;
        } else {
            product = response;
        }
        
        if (window.storage && window.storage.setCurrentProductId) {
            window.storage.setCurrentProductId(id);
        }
        document.getElementById('product-modal-title').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä';
        
        document.getElementById('product-name').value = product.name;
        document.getElementById('product-description').value = product.description;
        document.getElementById('product-gender').value = product.gender;
        document.getElementById('product-category').value = product.categoryId;
        document.getElementById('product-brand').value = product.brand;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏
        setVariations(product.variations || []);
        renderVariations();
        document.getElementById('product-modal').style.display = 'block';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞');
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
async function deleteProduct(id) {
    if (!window.ui || !window.ui.showConfirmDialog) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?')) {
            return;
        }
    } else {
        const confirmed = await window.ui.showConfirmDialog(
            '–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
            '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?',
            '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
            '–£–¥–∞–ª–∏—Ç—å',
            '–û—Ç–º–µ–Ω–∞'
        );
        
        if (!confirmed) return;
    }
    
    try {
        if (window.ui && window.ui.showMessage) {
            window.ui.showMessage('–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞...', 'info');
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º endpoint –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        const userRole = localStorage.getItem('userRole') || 'admin';
        let endpoint;
        
        if (userRole === 'super_admin' || userRole === 'admin') {
            endpoint = `/api/v1/admin/products/${id}`;
        } else if (userRole === 'shop_owner') {
            endpoint = `/api/v1/shop/products/${id}`;
        } else {
            endpoint = `/api/v1/shop/products/${id}`;
        }
        
        await window.api.fetchData(endpoint, { method: 'DELETE' });
        
        if (window.ui && window.ui.showMessage) {
            window.ui.showMessage('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', 'success');
        }
        
        await refreshProductsList();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
        
        let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        if (error.error && error.error.message) {
            errorMessage = error.error.message;
        } else if (error.message) {
            errorMessage = error.message;
        }
        
        if (window.ui && window.ui.showMessage) {
            window.ui.showMessage(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ${errorMessage}`, 'error');
        }
    }
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—Ä–∏–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–∞
async function viewProductVariations(id) {
    try {
        console.log('üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—Ä–∏–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–∞ —Å ID:', id);
        
        const response = await window.api.fetchData(`/api/v1/products/${id}`);
        console.log('üì° –û—Ç–≤–µ—Ç API –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', response);
        
        let product;
        if (response.data) {
            product = response.data;
        } else if (response.success && response.data) {
            product = response.data;
        } else if (response.product) {
            product = response.product;
        } else {
            product = response;
        }
        
        const variations = product?.variations || product?.product?.variations || [];
        const productData = product?.product || product;
        
        console.log('üì¶ –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞:', productData);
        console.log('üé® –í–∞—Ä–∏–∞—Ü–∏–∏:', variations);
        
        if (!variations || variations.length === 0) {
            if (window.ui && window.ui.showMessage) {
                window.ui.showMessage('–£ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤–∞—Ä–∏–∞—Ü–∏–π', 'info');
            }
            return;
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –≤–∞—Ä–∏–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (variations[0]) {
            console.log('üîç –ü–µ—Ä–≤–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞):', {
                sizes: variations[0].sizes,
                colors: variations[0].colors,
                price: variations[0].price,
                discount: variations[0].discount,
                stock: variations[0].stockQuantity,
                sku: variations[0].sku,
                images: variations[0].imageUrls
            });
        }
        
        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª–∞
        function getGenderText(gender) {
            switch (gender?.toLowerCase()) {
                case 'male': return '–ú—É–∂—Å–∫–æ–π';
                case 'female': return '–ñ–µ–Ω—Å–∫–∏–π';
                default: return '–£–Ω–∏—Å–µ–∫—Å';
            }
        }
        
        const modal = document.createElement('div');
        modal.className = 'modal';
        modal.style.display = 'block';
        
        modal.innerHTML = `
            <div class="modal-content" style="max-width: 900px; margin: 50px auto;">
                <div class="modal-header">
                    <h3><i class="fas fa-layer-group"></i> –í–∞—Ä–∏–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞: ${productData.name}</h3>
                    <span class="close" onclick="this.closest('.modal').remove()">&times;</span>
                </div>
                <div style="padding: 20px; max-height: 70vh; overflow-y: auto;">
                    <div style="margin-bottom: 20px; padding: 15px; background: linear-gradient(135deg, #f8f9fa, #e9ecef); border-radius: 10px;">
                        <h4 style="margin: 0 0 10px 0; color: #2c3e50;"><i class="fas fa-box"></i> –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ</h4>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; font-size: 14px;">
                            <div><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> ${productData.name}</div>
                            <div><strong>–ë—Ä–µ–Ω–¥:</strong> ${productData.brand || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                            <div><strong>–ü–æ–ª:</strong> ${getGenderText(productData.gender)}</div>
                            <div><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${productData.category?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</div>
                        </div>
                    </div>
                    
                    <h4 style="margin: 0 0 15px 0; color: #2c3e50;"><i class="fas fa-list"></i> –í–∞—Ä–∏–∞—Ü–∏–∏ (${variations.length})</h4>
                    <div style="display: grid; gap: 15px;">
                        ${variations.map((variation, index) => `
                            <div style="border: 2px solid #e9ecef; border-radius: 12px; padding: 20px; background: white; position: relative; overflow: hidden;">
                                <div style="position: absolute; top: 0; left: 0; right: 0; height: 4px; background: linear-gradient(135deg, #667eea, #764ba2);"></div>
                                
                                <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 15px;">
                                    <h5 style="margin: 0; color: #2c3e50; font-size: 16px;"><i class="fas fa-tag"></i> –í–∞—Ä–∏–∞—Ü–∏—è ${index + 1}</h5>
                                    ${variation.id ? `<span class="badge" style="background: linear-gradient(135deg, #667eea, #764ba2); color: white; font-size: 12px; padding: 6px 12px;">ID: ${variation.id?.substring(0, 8)}...</span>` : ''}
                                </div>
                                
                                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; margin-bottom: 15px;">
                                    <div>
                                        <strong style="color: #495057; font-size: 13px;">–†–∞–∑–º–µ—Ä—ã:</strong>
                                        <div style="margin-top: 5px;">
                                            ${variation.sizes && variation.sizes.length > 0 
                                                ? variation.sizes.map(size => `<span class="badge" style="background: #e9ecef; color: #495057; margin: 2px; padding: 4px 8px; font-size: 11px;">${size}</span>`).join('')
                                                : '<span style="color: #6c757d; font-style: italic;">–ù–µ —É–∫–∞–∑–∞–Ω—ã</span>'
                                            }
                                        </div>
                                    </div>
                                    
                                    <div>
                                        <strong style="color: #495057; font-size: 13px;">–¶–≤–µ—Ç–∞:</strong>
                                        <div style="margin-top: 5px;">
                                            ${variation.colors && variation.colors.length > 0 
                                                ? variation.colors.map(color => `<span class="badge" style="background: #e9ecef; color: #495057; margin: 2px; padding: 4px 8px; font-size: 11px;">${color}</span>`).join('')
                                                : '<span style="color: #6c757d; font-style: italic;">–ù–µ —É–∫–∞–∑–∞–Ω—ã</span>'
                                            }
                                        </div>
                                    </div>
                                    
                                    <div>
                                        <strong style="color: #495057; font-size: 13px;">–¶–µ–Ω–∞:</strong>
                                        <div style="margin-top: 5px; font-size: 18px; font-weight: bold; color: #28a745;">
                                            ‚ÇΩ${variation.price || 0}
                                        </div>
                                    </div>
                                    
                                    <div>
                                        <strong style="color: #495057; font-size: 13px;">–°–∫–∏–¥–∫–∞:</strong>
                                        <div style="margin-top: 5px; font-size: 16px; font-weight: bold; color: ${variation.discount > 0 ? '#e67e22' : '#6c757d'};">
                                            ${variation.discount || 0}%
                                        </div>
                                    </div>
                                    
                                    <div>
                                        <strong style="color: #495057; font-size: 13px;">–û—Å—Ç–∞—Ç–æ–∫:</strong>
                                        <div style="margin-top: 5px; font-size: 16px; font-weight: bold; color: ${variation.stockQuantity > 0 ? '#28a745' : '#dc3545'};">
                                            ${variation.stockQuantity || 0} —à—Ç.
                                        </div>
                                    </div>
                                </div>
                                
                                ${variation.sku ? `
                                    <div style="margin-bottom: 15px;">
                                        <strong style="color: #495057; font-size: 13px;">SKU:</strong>
                                        <span style="font-family: monospace; background: #f8f9fa; padding: 4px 8px; border-radius: 4px; font-size: 12px;">${variation.sku}</span>
                                    </div>
                                ` : ''}
                                
                                ${(variation.imageUrls && variation.imageUrls.length > 0) ? `
                                    <div style="margin-bottom: 15px;">
                                        <strong style="color: #495057; font-size: 13px;"><i class="fas fa-images"></i> –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (${variation.imageUrls.length}):</strong>
                                        <div class="variation-images-preview" style="display: flex; gap: 10px; margin-top: 10px; flex-wrap: wrap;">
                                            ${variation.imageUrls.map((url, imgIndex) => {
                                                // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                                let imageUrl = url;
                                                if (typeof window.getImageUrl === 'function') {
                                                    imageUrl = window.getImageUrl(url);
                                                } else if (typeof getImageUrl === 'function') {
                                                    imageUrl = getImageUrl(url);
                                                } else {
                                                    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –≤—Ä—É—á–Ω—É—é
                                                    const API_BASE_URL = window.getApiUrl ? window.getApiUrl('') : (CONFIG && CONFIG.API && CONFIG.API.BASE_URL ? CONFIG.API.BASE_URL : '');
                                                    imageUrl = url.startsWith('http') ? url : `${API_BASE_URL}${url.startsWith('/') ? url : '/' + url}`;
                                                }
                                                return `
                                                    <div class="image-preview-item" style="position: relative; border: 2px solid #e9ecef; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                                                        <img 
                                                            src="${imageUrl}" 
                                                            alt="Photo ${imgIndex + 1}" 
                                                            onclick="window.openImageModal('${imageUrl}', '–§–æ—Ç–æ –≤–∞—Ä–∏–∞—Ü–∏–∏ ${index + 1}')"
                                                            style="width: 120px; height: 120px; object-fit: cover; cursor: pointer; transition: transform 0.2s;"
                                                            onerror="this.src='data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%22120%22 height=%22120%22%3E%3Crect fill=%22%23f8f9fa%22 width=%22120%22 height=%22120%22/%3E%3Ctext x=%2250%25%22 y=%2250%25%22 fill=%22%236c757d%22 text-anchor=%22middle%22 dy=%22.3em%22 font-size=%2214%22%3E–ù–µ—Ç —Ñ–æ—Ç–æ%3C/text%3E%3C/svg%3E'; console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', '${imageUrl}');"
                                                            onmouseover="this.style.transform='scale(1.05)'"
                                                            onmouseout="this.style.transform='scale(1)'"
                                                        >
                                                        <div style="position: absolute; bottom: 0; left: 0; right: 0; background: rgba(0,0,0,0.7); color: white; font-size: 10px; padding: 2px 6px; text-align: center;">
                                                            #${imgIndex + 1}
                                                        </div>
                                                    </div>
                                                `;
                                            }).join('')}
                                        </div>
                                    </div>
                                ` : '<div style="margin-bottom: 15px; color: #6c757d; font-style: italic;"><i class="fas fa-ban"></i> –ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</div>'}
                            </div>
                        `).join('')}
                    </div>
                </div>
                <div style="padding: 20px; border-top: 1px solid #e9ecef; text-align: center;">
                    <button class="btn btn-primary" onclick="this.closest('.modal').remove()"><i class="fas fa-times"></i> –ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.remove();
            }
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—Ä–∏–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–∞:', error);
        if (window.ui && window.ui.showMessage) {
            window.ui.showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—Ä–∏–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–∞: ' + error.message, 'error');
        }
    }
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞—Ä–∏–∞—Ü–∏–π
function addVariation() {
    const variation = {
        id: Date.now(),
        sizes: [],
        colors: [],
        price: 0,
        originalPrice: null,
        discount: 0,
        stockQuantity: 0,
        sku: '',
        imageUrls: []
    };
    
    if (window.storage && window.storage.addVariation) {
        window.storage.addVariation(variation);
    } else {
        variations.push(variation);
    }
    
    renderVariations();
}

function removeVariation(index) {
    if (window.storage && window.storage.removeVariation) {
        window.storage.removeVariation(index);
    } else {
        variations.splice(index, 1);
    }
    renderVariations();
}

function renderVariations() {
    const container = document.getElementById('variations-list');
    if (!container) return;
    
    const vars = getVariations();
    
    if (vars.length === 0) {
        container.innerHTML = '<p class="no-variations">–ù–µ—Ç –≤–∞—Ä–∏–∞—Ü–∏–π. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≤–∞—Ä–∏–∞—Ü–∏—é.</p>';
        return;
    }
    
    container.innerHTML = vars.map((variation, index) => `
        <div class="variation-item" data-variation-index="${index}">
            <button type="button" class="remove-variation" onclick="window.products.removeVariation(${index})">√ó</button>
            <div class="variation-fields">
                <div class="variation-field">
                    <label>–¢–∏–ø —Ä–∞–∑–º–µ—Ä–∞</label>
                    <select onchange="window.products.changeSizeType(${index}, this.value)" class="form-input" style="margin-bottom: 10px;">
                        <option value="clothing">–û–¥–µ–∂–¥–∞ (XS-XXL)</option>
                        <option value="shoes">–û–±—É–≤—å (36-46)</option>
                        <option value="pants">–®—Ç–∞–Ω—ã/–î–∂–∏–Ω—Å—ã (28-40)</option>
                    </select>
                </div>
                <div class="variation-field">
                    <label>–†–∞–∑–º–µ—Ä—ã</label>
                    <div class="checkbox-group" id="sizes-container-${index}">
                        <!-- –†–∞–∑–º–µ—Ä—ã –æ–¥–µ–∂–¥—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
                        <label><input type="checkbox" value="XS" ${variation.sizes?.includes('XS') ? 'checked' : ''}> XS</label>
                        <label><input type="checkbox" value="S" ${variation.sizes?.includes('S') ? 'checked' : ''}> S</label>
                        <label><input type="checkbox" value="M" ${variation.sizes?.includes('M') ? 'checked' : ''}> M</label>
                        <label><input type="checkbox" value="L" ${variation.sizes?.includes('L') ? 'checked' : ''}> L</label>
                        <label><input type="checkbox" value="XL" ${variation.sizes?.includes('XL') ? 'checked' : ''}> XL</label>
                        <label><input type="checkbox" value="XXL" ${variation.sizes?.includes('XXL') ? 'checked' : ''}> XXL</label>
                    </div>
                </div>
                <div class="variation-field">
                    <label>–¶–≤–µ—Ç–∞</label>
                    <div class="checkbox-group" style="max-height: 200px; overflow-y: auto; padding: 5px;">
                        <label><input type="checkbox" value="–ö—Ä–∞—Å–Ω—ã–π" ${variation.colors?.includes('–ö—Ä–∞—Å–Ω—ã–π') ? 'checked' : ''}> üî¥ –ö—Ä–∞—Å–Ω—ã–π</label>
                        <label><input type="checkbox" value="–°–∏–Ω–∏–π" ${variation.colors?.includes('–°–∏–Ω–∏–π') ? 'checked' : ''}> üîµ –°–∏–Ω–∏–π</label>
                        <label><input type="checkbox" value="–ó–µ–ª–µ–Ω—ã–π" ${variation.colors?.includes('–ó–µ–ª–µ–Ω—ã–π') ? 'checked' : ''}> üü¢ –ó–µ–ª–µ–Ω—ã–π</label>
                        <label><input type="checkbox" value="–ß–µ—Ä–Ω—ã–π" ${variation.colors?.includes('–ß–µ—Ä–Ω—ã–π') ? 'checked' : ''}> ‚ö´ –ß–µ—Ä–Ω—ã–π</label>
                        <label><input type="checkbox" value="–ë–µ–ª—ã–π" ${variation.colors?.includes('–ë–µ–ª—ã–π') ? 'checked' : ''}> ‚ö™ –ë–µ–ª—ã–π</label>
                        <label><input type="checkbox" value="–°–µ—Ä—ã–π" ${variation.colors?.includes('–°–µ—Ä—ã–π') ? 'checked' : ''}> ‚ö´ –°–µ—Ä—ã–π</label>
                        <label><input type="checkbox" value="–ñ–µ–ª—Ç—ã–π" ${variation.colors?.includes('–ñ–µ–ª—Ç—ã–π') ? 'checked' : ''}> üü° –ñ–µ–ª—Ç—ã–π</label>
                        <label><input type="checkbox" value="–û—Ä–∞–Ω–∂–µ–≤—ã–π" ${variation.colors?.includes('–û—Ä–∞–Ω–∂–µ–≤—ã–π') ? 'checked' : ''}> üü† –û—Ä–∞–Ω–∂–µ–≤—ã–π</label>
                        <label><input type="checkbox" value="–†–æ–∑–æ–≤—ã–π" ${variation.colors?.includes('–†–æ–∑–æ–≤—ã–π') ? 'checked' : ''}> üå∏ –†–æ–∑–æ–≤—ã–π</label>
                        <label><input type="checkbox" value="–§–∏–æ–ª–µ—Ç–æ–≤—ã–π" ${variation.colors?.includes('–§–∏–æ–ª–µ—Ç–æ–≤—ã–π') ? 'checked' : ''}> üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π</label>
                        <label><input type="checkbox" value="–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π" ${variation.colors?.includes('–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π') ? 'checked' : ''}> üü§ –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π</label>
                        <label><input type="checkbox" value="–ë–µ–∂–µ–≤—ã–π" ${variation.colors?.includes('–ë–µ–∂–µ–≤—ã–π') ? 'checked' : ''}> üü´ –ë–µ–∂–µ–≤—ã–π</label>
                        <label><input type="checkbox" value="–ì–æ–ª—É–±–æ–π" ${variation.colors?.includes('–ì–æ–ª—É–±–æ–π') ? 'checked' : ''}> üîµ –ì–æ–ª—É–±–æ–π</label>
                        <label><input type="checkbox" value="–°–∞–ª–∞—Ç–æ–≤—ã–π" ${variation.colors?.includes('–°–∞–ª–∞—Ç–æ–≤—ã–π') ? 'checked' : ''}> üü¢ –°–∞–ª–∞—Ç–æ–≤—ã–π</label>
                        <label><input type="checkbox" value="–ë–æ—Ä–¥–æ–≤—ã–π" ${variation.colors?.includes('–ë–æ—Ä–¥–æ–≤—ã–π') ? 'checked' : ''}> üî¥ –ë–æ—Ä–¥–æ–≤—ã–π</label>
                        <label><input type="checkbox" value="–¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π" ${variation.colors?.includes('–¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π') ? 'checked' : ''}> üîµ –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π</label>
                    </div>
                </div>
                <div class="variation-field">
                    <label>–¶–µ–Ω–∞ (‚ÇΩ)</label>
                    <input type="number" value="${variation.price}" min="0" step="0.01" placeholder="0.00" oninput="window.products.updateVariation(${index}, 'price', parseFloat(this.value)||0)">
                </div>
                <div class="variation-field">
                    <label>–°–∫–∏–¥–∫–∞ (%)</label>
                    <input type="number" value="${variation.discount || 0}" min="0" max="100" step="1" placeholder="0" oninput="window.products.updateVariation(${index}, 'discount', Math.min(100, Math.max(0, parseInt(this.value)||0)))">
                </div>
                <div class="variation-field">
                    <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
                    <input type="number" value="${variation.stockQuantity}" min="0" placeholder="0" oninput="window.products.updateVariation(${index}, 'stockQuantity', Math.max(0, parseInt(this.value)||0))">
                </div>
                <div class="variation-field">
                    <label>SKU</label>
                    <input type="text" value="${variation.sku||''}" placeholder="SKU" oninput="window.products.updateVariation(${index}, 'sku', this.value)">
                </div>
                <div class="variation-field">
                    <label>–§–æ—Ç–æ –≤–∞—Ä–∏–∞—Ü–∏–∏ (–Ω–µ—Å–∫–æ–ª—å–∫–æ)</label>
                    <input type="file" accept="image/*" multiple onchange="window.products.uploadVariationImages(${index}, this)">
                    ${variation.imageUrls && variation.imageUrls.length ? `
                    <div class="variation-images-preview">
                        ${variation.imageUrls.map((url, imgIndex) => {
                            const imageUrl = window.getImageUrl ? window.getImageUrl(url) : url;
                            return `
                            <div class="image-preview-item">
                                <img src="${imageUrl}" alt="Preview" style="max-width: 70px; max-height: 70px; object-fit: cover; border-radius: 6px;">
                                <button type="button" class="remove-image" onclick="window.products.removeVariationImage(${index}, ${imgIndex})">√ó</button>
                            </div>`;
                        }).join('')}
                    </div>` : ''}
                </div>
            </div>
        </div>
    `).join('');

    // –£—Å—Ç–∞–Ω–æ–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–µ–∫–±–æ–∫—Å–æ–≤ –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞
    container.querySelectorAll('.variation-item').forEach(item => {
        const idx = parseInt(item.getAttribute('data-variation-index'));
        // sizes
        item.querySelectorAll('.checkbox-group input[type="checkbox"]').forEach(input => {
            input.addEventListener('change', (e) => {
                const field = item.querySelector('label').textContent.includes('–†–∞–∑–º–µ—Ä—ã') ? 'sizes' : undefined;
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –±–ª–∏–∂–∞–π—à–µ–º—É —Ä–æ–¥–∏—Ç–µ–ª—é
                const parentLabel = e.target.closest('.variation-field').querySelector('label').textContent;
                const targetField = parentLabel.includes('–†–∞–∑–º–µ—Ä') ? 'sizes' : (parentLabel.includes('–¶–≤–µ—Ç') ? 'colors' : null);
                if (!targetField) return;
                window.products.updateVariationMulti(idx, targetField, e.target.value, e.target.checked);
            });
        });
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –≤–∞—Ä–∏–∞—Ü–∏–∏
function updateVariation(index, field, value) {
    const vars = getVariations();
    if (!vars[index]) return;
    vars[index][field] = value;
    setVariations(vars);
}

function updateVariationMulti(index, field, value, checked) {
    const vars = getVariations();
    if (!vars[index]) return;
    if (!Array.isArray(vars[index][field])) vars[index][field] = [];
    if (checked) {
        if (!vars[index][field].includes(value)) vars[index][field].push(value);
    } else {
        vars[index][field] = vars[index][field].filter(v => v !== value);
    }
    setVariations(vars);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–∞—Ä–∏–∞—Ü–∏–∏
async function uploadVariationImages(variationIndex, inputEl) {
    const files = Array.from(inputEl.files || []);
    if (files.length === 0) return;

    const adminToken = window.storage && window.storage.getAdminToken ? window.storage.getAdminToken() : null;
    const folder = 'variations';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    if (window.ui && window.ui.showMessage) {
        window.ui.showMessage(`‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ ${files.length} —Ñ–æ—Ç–æ...`, 'info');
    }

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–µ–≤—å—é –∑–∞–≥—Ä—É–∑–∫–∏
    let loadingContainer = document.getElementById(`loading-preview-${variationIndex}`);
    
    if (!loadingContainer) {
        loadingContainer = document.createElement('div');
        loadingContainer.id = `loading-preview-${variationIndex}`;
        loadingContainer.className = 'loading-preview';
        loadingContainer.style.cssText = 'display: flex; gap: 10px; margin-top: 10px; flex-wrap: wrap; position: fixed; top: 20px; right: 20px; z-index: 9999; background: white; padding: 15px; border-radius: 10px; box-shadow: 0 4px 15px rgba(0,0,0,0.2); max-width: 400px; max-height: 80vh; overflow-y: auto;';
        document.body.appendChild(loadingContainer);
    }

    const uploadedUrls = [];
    let successCount = 0;
    let failCount = 0;

    for (let i = 0; i < files.length; i++) {
        const file = files[i];
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        const filePreview = URL.createObjectURL(file);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –±–æ–ª—å—à–∏–º —Ä–∞–∑–º–µ—Ä–æ–º
        const loadingItem = document.createElement('div');
        loadingItem.className = 'loading-item';
        loadingItem.style.cssText = 'position: relative; width: 120px; height: 120px; border: 2px solid #667eea; border-radius: 8px; overflow: hidden; background: #f8f9fa;';
        loadingItem.innerHTML = `
            <div style="position: absolute; inset: 0; display: flex; align-items: center; justify-content: center; background: rgba(255,255,255,0.9); z-index: 2;">
                <div style="text-align: center;">
                    <i class="fas fa-spinner fa-spin" style="font-size: 32px; color: #667eea;"></i>
                    <div style="margin-top: 8px; font-size: 12px; color: #666; font-weight: bold;">${i + 1}/${files.length}</div>
                </div>
            </div>
            <img src="${filePreview}" style="width: 100%; height: 100%; object-fit: cover;" alt="Preview">
        `;
        loadingContainer?.appendChild(loadingItem);
        
        const formData = new FormData();
        formData.append('image', file);
        formData.append('folder', folder);
        
        try {
            const resp = await fetch(getApiUrl(CONFIG.API.ENDPOINTS.UPLOAD.IMAGE) + `?folder=${folder}`, {
                method: 'POST',
                headers: adminToken ? { 'Authorization': `Bearer ${adminToken}` } : {},
                body: formData
            });
            const data = await resp.json();
            
            if (resp.ok && (data.url || data.data?.url)) {
                const url = data.url || data.data.url;
                uploadedUrls.push(url);
                successCount++;
                
                // –ú–µ–Ω—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π —Å –ø—Ä–µ–≤—å—é
                const imageUrl = window.getImageUrl ? window.getImageUrl(url) : url;
                loadingItem.innerHTML = `
                    <div style="position: absolute; top: 5px; right: 5px; background: #28a745; border-radius: 50%; width: 24px; height: 24px; display: flex; align-items: center; justify-content: center; z-index: 3; box-shadow: 0 2px 4px rgba(0,0,0,0.2);">
                        <i class="fas fa-check" style="font-size: 12px; color: white;"></i>
                    </div>
                    <img src="${imageUrl}" style="width: 100%; height: 100%; object-fit: cover;" alt="Uploaded" onerror="this.src='data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22%3E%3Crect fill=%22%23f8f9fa%22 width=%22120%22 height=%22120%22/%3E%3Ctext x=%2250%25%22 y=%2250%25%22 fill=%22%236c757d%22 text-anchor=%22middle%22 dy=%22.3em%22%3E–û—à–∏–±–∫–∞%3C/text%3E%3C/svg%3E';">
                `;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤–∞—Ä–∏–∞—Ü–∏—é, –Ω–æ –Ω–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
                const vars = getVariations();
                if (!Array.isArray(vars[variationIndex].imageUrls)) vars[variationIndex].imageUrls = [];
                vars[variationIndex].imageUrls.push(url);
                setVariations(vars);
                
                // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å –æ—Ç –ø—Ä–µ–≤—å—é
                URL.revokeObjectURL(filePreview);
                
            } else {
                failCount++;
                loadingItem.innerHTML = `
                    <div style="position: absolute; inset: 0; display: flex; align-items: center; justify-content: center; background: rgba(220,53,69,0.1);">
                        <i class="fas fa-times-circle" style="font-size: 32px; color: #dc3545;"></i>
                    </div>
                `;
                URL.revokeObjectURL(filePreview);
            }
        } catch (e) {
            console.error('upload error', e);
            failCount++;
            loadingItem.innerHTML = `
                <div style="position: absolute; inset: 0; display: flex; align-items: center; justify-content: center; background: rgba(220,53,69,0.1);">
                    <i class="fas fa-times-circle" style="font-size: 32px; color: #dc3545;"></i>
                </div>
            `;
            URL.revokeObjectURL(filePreview);
        }
    }

    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∑–æ–∫
    renderVariations();

    // –£–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏)
    setTimeout(() => {
        if (loadingContainer) {
            loadingContainer.remove();
        }
    }, 3000);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (window.ui && window.ui.showMessage) {
        if (failCount === 0) {
            window.ui.showMessage(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${successCount} —Ñ–æ—Ç–æ`, 'success');
        } else {
            window.ui.showMessage(`‚ö†Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${successCount}, –æ—à–∏–±–æ–∫ ${failCount}`, 'warning');
        }
    }

    inputEl.value = '';
}

function removeVariationImage(variationIndex, imgIndex) {
    const vars = getVariations();
    if (!vars[variationIndex] || !Array.isArray(vars[variationIndex].imageUrls)) return;
    vars[variationIndex].imageUrls.splice(imgIndex, 1);
    setVariations(vars);
    renderVariations();
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ç–æ–≤–∞—Ä–∞
function openProductModal() {
    const modal = document.getElementById('product-modal');
    const title = document.getElementById('product-modal-title');
    
    if (modal && title) {
        title.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä';
        document.getElementById('product-form')?.reset();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏
        setVariations([]);
        renderVariations();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID
        if (window.storage) {
            if (window.storage.setCurrentProductId) {
                window.storage.setCurrentProductId(null);
            }
        }
        modal.style.display = 'block';
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ç–æ–≤–∞—Ä–∞
function closeProductModal() {
    const modal = document.getElementById('product-modal');
    if (modal) {
        modal.style.display = 'none';
        currentProductId = null;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —Ç–æ–≤–∞—Ä–∞
async function handleProductSubmit(e) {
    e.preventDefault();
    
    console.log('üìù –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Ç–æ–≤–∞—Ä–∞...');
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑ DOM –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    syncVariationsFromDOM();
    
    try {
        const formData = {
            name: document.getElementById('product-name').value,
            description: document.getElementById('product-description').value,
            gender: document.getElementById('product-gender').value,
            categoryId: document.getElementById('product-category').value,
            brand: document.getElementById('product-brand').value,
            variations: getVariations()
        };
        
        console.log('üì¶ –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData);
        console.log('üì¶ –í–∞—Ä–∏–∞—Ü–∏–∏ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏:', formData.variations.map(v => ({ sizes: v.sizes, colors: v.colors })));
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –≤–∞—Ä–∏–∞—Ü–∏–∏
        if (!formData.variations || formData.variations.length === 0) {
            if (window.ui && window.ui.showMessage) {
                window.ui.showMessage('‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≤–∞—Ä–∏–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–∞!', 'error');
            } else {
                alert('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≤–∞—Ä–∏–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–∞!');
            }
            return;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –∏ endpoint
        const userRole = localStorage.getItem('userRole') || 'admin';
        let endpoint;
        
        if (userRole === 'super_admin' || userRole === 'admin') {
            endpoint = '/api/v1/admin/products/';
        } else if (userRole === 'shop_owner') {
            endpoint = '/api/v1/shop/products/';
        } else {
            endpoint = '/api/v1/shop/products/';
        }
        
        console.log(`üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º endpoint: ${endpoint}`);
        
        const currentProductId = window.storage ? window.storage.getCurrentProductId() : null;
        
        let response;
        if (currentProductId) {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–±–µ–∑ —Å–ª—ç—à–∞ –≤ –∫–æ–Ω—Ü–µ)
            response = await window.api.fetchData(`${endpoint}${currentProductId}`, {
                method: 'PUT',
                body: JSON.stringify(formData)
            });
        } else {
            // –°–æ–∑–¥–∞–Ω–∏–µ
            response = await window.api.fetchData(endpoint, {
                method: 'POST',
                body: JSON.stringify(formData)
            });
        }
        
        console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
        
        if (window.ui && window.ui.showMessage) {
            window.ui.showMessage('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', 'success');
        }
        
        closeProductModal();
        loadProducts();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
        if (window.ui && window.ui.showMessage) {
            window.ui.showMessage('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ' + error.message, 'error');
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —Ç–∏–ø–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
function changeSizeType(variationIndex, sizeType) {
    const container = document.getElementById(`sizes-container-${variationIndex}`);
    if (!container) {
        console.error(`‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä sizes-container-${variationIndex} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑ —á–µ–∫–±–æ–∫—Å–æ–≤
    const currentCheckboxes = container.querySelectorAll('input[type="checkbox"]:checked');
    const currentSizes = Array.from(currentCheckboxes).map(cb => cb.value);
    
    console.log('üì¶ –¢–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã:', currentSizes);
    
    let sizesHTML = '';
    
    switch(sizeType) {
        case 'shoes':
            // –†–∞–∑–º–µ—Ä—ã –æ–±—É–≤–∏ (36-46)
            const shoeSizes = ['36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46'];
            sizesHTML = shoeSizes.map(size => 
                `<label><input type="checkbox" value="${size}" onchange="window.products.updateVariationSize(${variationIndex})" ${currentSizes.includes(size) ? 'checked' : ''}> ${size}</label>`
            ).join('');
            break;
            
        case 'pants':
            // –†–∞–∑–º–µ—Ä—ã —à—Ç–∞–Ω–æ–≤/–¥–∂–∏–Ω—Å–æ–≤ (28-40)
            const pantsSizes = ['28', '29', '30', '31', '32', '33', '34', '36', '38', '40'];
            sizesHTML = pantsSizes.map(size => 
                `<label><input type="checkbox" value="${size}" onchange="window.products.updateVariationSize(${variationIndex})" ${currentSizes.includes(size) ? 'checked' : ''}> ${size}</label>`
            ).join('');
            break;
            
        case 'clothing':
        default:
            // –†–∞–∑–º–µ—Ä—ã –æ–¥–µ–∂–¥—ã (XS-XXL)
            const clothingSizes = ['XS', 'S', 'M', 'L', 'XL', 'XXL'];
            sizesHTML = clothingSizes.map(size => 
                `<label><input type="checkbox" value="${size}" onchange="window.products.updateVariationSize(${variationIndex})" ${currentSizes.includes(size) ? 'checked' : ''}> ${size}</label>`
            ).join('');
            break;
    }
    
    container.innerHTML = sizesHTML;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —Ç–∏–ø–∞
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –Ω–æ–≤—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤ (–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–º–µ—á–µ–Ω—ã, –µ—Å–ª–∏ –±—ã–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)
    setTimeout(() => {
        updateVariationSize(variationIndex);
    }, 0);
    
    console.log(`‚úÖ –¢–∏–ø —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${sizeType} –¥–ª—è –≤–∞—Ä–∏–∞—Ü–∏–∏ ${variationIndex}`);
    console.log(`üìä –ù–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã:`, sizeType === 'shoes' ? '36-46' : sizeType === 'pants' ? '28-40' : 'XS-XXL');
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞—Ü–∏–π –∏–∑ DOM –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
function syncVariationsFromDOM() {
    const vars = getVariations();
    let updated = false;
    
    for (let i = 0; i < vars.length; i++) {
        const container = document.getElementById(`sizes-container-${i}`);
        if (container) {
            const checkboxes = container.querySelectorAll('input[type="checkbox"]:checked');
            const selectedSizes = Array.from(checkboxes).map(cb => cb.value);
            
            if (JSON.stringify(vars[i].sizes) !== JSON.stringify(selectedSizes)) {
                vars[i].sizes = selectedSizes;
                updated = true;
                console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –≤–∞—Ä–∏–∞—Ü–∏–∏ ${i}:`, selectedSizes);
            }
        }
    }
    
    if (updated) {
        setVariations(vars);
        console.log('‚úÖ –í—Å–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ DOM');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –≤–∞—Ä–∏–∞—Ü–∏–∏
function updateVariationSize(variationIndex) {
    const container = document.getElementById(`sizes-container-${variationIndex}`);
    if (!container) return;
    
    const checkboxes = container.querySelectorAll('input[type="checkbox"]:checked');
    const selectedSizes = Array.from(checkboxes).map(cb => cb.value);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–≤–∞–∂–Ω–æ!)
    const vars = getVariations();
    if (vars[variationIndex]) {
        vars[variationIndex].sizes = selectedSizes;
        setVariations(vars);
        console.log(`‚úÖ –†–∞–∑–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –≤–∞—Ä–∏–∞—Ü–∏–∏ ${variationIndex}:`, selectedSizes);
    }
    
    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if (currentProduct && currentProduct.variations && currentProduct.variations[variationIndex]) {
        currentProduct.variations[variationIndex].sizes = selectedSizes;
    }
}

window.products = {
    loadProducts,
    displayProducts,
    refreshProductsList,
    editProduct,
    loadProductData,
    deleteProduct,
    viewProductVariations,
    addVariation,
    removeVariation,
    renderVariations,
    updateVariation,
    updateVariationMulti,
    uploadVariationImages,
    removeVariationImage,
    openProductModal,
    closeProductModal,
    handleProductSubmit,
    changeSizeType,
    updateVariationSize
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.viewProductVariations = viewProductVariations;
window.openProductModal = openProductModal;
window.closeProductModal = closeProductModal;

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
window.openImageModal = function(imageUrl, title = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ') {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.style.display = 'block';
    modal.style.zIndex = '10000';
    modal.style.backgroundColor = 'rgba(0, 0, 0, 0.9)';
    
    modal.innerHTML = `
        <div class="modal-content" style="max-width: 90vw; max-height: 90vh; margin: 5vh auto; background: transparent; box-shadow: none;">
            <div style="position: relative; display: flex; align-items: center; justify-content: center;">
                <span class="close" onclick="this.closest('.modal').remove()" style="position: absolute; top: -40px; right: 0; color: white; font-size: 40px; cursor: pointer; z-index: 10001;">&times;</span>
                <img src="${imageUrl}" alt="${title}" style="max-width: 100%; max-height: 90vh; object-fit: contain; border-radius: 10px; box-shadow: 0 10px 50px rgba(0,0,0,0.5);">
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.remove();
        }
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
    const handleEscape = (e) => {
        if (e.key === 'Escape') {
            modal.remove();
            document.removeEventListener('keydown', handleEscape);
        }
    };
    document.addEventListener('keydown', handleEscape);
};

