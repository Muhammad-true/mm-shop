// ===== API.JS - –†–∞–±–æ—Ç–∞ —Å API =====

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
async function fetchData(endpoint, options = {}) {
    const API_BASE_URL = window.getApiUrl ? window.getApiUrl('') : CONFIG.API.BASE_URL;
    const adminToken = (window.storage && window.storage.getAdminToken) ? window.storage.getAdminToken() : (window.getAdminToken ? window.getAdminToken() : null);
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π —Å–ª–µ—à –µ—Å–ª–∏ endpoint –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /
    const cleanEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;
    const url = `${API_BASE_URL}${cleanEndpoint}`;
    
    // –õ–æ–≥–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`üåê API Request: ${options.method || 'GET'} ${url}`);
    
    const headers = {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest',
        ...options.headers
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –í–°–ï–• –∑–∞–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (adminToken) {
        headers['Authorization'] = `Bearer ${adminToken}`;
        console.log('üîë –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:', endpoint);
    } else {
        console.log('‚ö†Ô∏è –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:', endpoint);
    }
    
    const response = await fetch(url, {
        headers,
        ...options
    });
    
    if (!response.ok) {
        let errorMessage = `HTTP error! status: ${response.status}`;
        try {
            const errorData = await response.json();
            errorMessage = errorData.message || errorData.error || errorMessage;
        } catch (e) {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            try {
                const errorText = await response.text();
                if (errorText) errorMessage = errorText;
            } catch (e2) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
            }
        }
        throw new Error(errorMessage);
    }
    
    return await response.json();
}

// CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
async function createProduct(data) {
    return await fetchData('/api/v1/shop/products/', {
        method: 'POST',
        body: JSON.stringify(data)
    });
}

async function updateProduct(id, data) {
    return await fetchData(`/api/v1/shop/products/${id}/`, {
        method: 'PUT',
        body: JSON.stringify(data)
    });
}

async function deleteProduct(id) {
    return await fetchData(`/api/v1/shop/products/${id}/`, {
        method: 'DELETE'
    });
}

// CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async function createCategory(data) {
    return await fetchData('/api/v1/admin/categories/', {
        method: 'POST',
        body: JSON.stringify(data)
    });
}

async function updateCategory(id, data) {
    return await fetchData(`/api/v1/admin/categories/${id}/`, {
        method: 'PUT',
        body: JSON.stringify(data)
    });
}

async function deleteCategory(id) {
    return await fetchData(`/api/v1/admin/categories/${id}/`, {
        method: 'DELETE'
    });
}

// CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function createUser(data) {
    return await fetchData('/api/v1/admin/users/', {
        method: 'POST',
        body: JSON.stringify(data)
    });
}

async function updateUser(id, data) {
    return await fetchData(`/api/v1/admin/users/${id}/`, {
        method: 'PUT',
        body: JSON.stringify(data)
    });
}

async function deleteUser(id) {
    return await fetchData(`/api/v1/admin/users/${id}/`, {
        method: 'DELETE'
    });
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
async function testConnection() {
    try {
        const response = await fetch(getApiUrl(CONFIG.API.ENDPOINTS.HEALTH));
        const data = await response.json();
        
        if (response.ok) {
            return { success: true, data };
        } else {
            return { success: false, error: 'API —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç' };
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
        return { success: false, error: error.message };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
window.api = {
    fetchData,
    createProduct,
    updateProduct,
    deleteProduct,
    createCategory,
    updateCategory,
    deleteCategory,
    createUser,
    updateUser,
    deleteUser,
    testConnection
};

// –î–µ–ª–∞–µ–º testConnection –≥–ª–æ–±–∞–ª—å–Ω–æ–π –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.testConnection = async function() {
    const result = await window.api.testConnection();
    if (result.success) {
        if (window.ui && window.ui.showMessage) {
            window.ui.showMessage('‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!', 'success');
        } else {
            alert('‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
        }
    } else {
        if (window.ui && window.ui.showMessage) {
            window.ui.showMessage(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${result.error}`, 'error');
        } else {
            alert(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${result.error}`);
        }
    }
    return result;
};

