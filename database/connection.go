package database

import (
	"fmt"
	"log"

	"github.com/mm-api/mm-api/config"
	"github.com/mm-api/mm-api/models"
	"golang.org/x/crypto/bcrypt"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

var DB *gorm.DB

// Connect –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
func Connect() error {
	log.Println("üîß Connect function started")

	var err error
	cfg := config.GetConfig()

	log.Println("üîó Connecting to PostgreSQL database...")

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º DATABASE_URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	dsn := cfg.DatabaseURL
	log.Printf("üìä Database URL configured: %s", maskDatabaseURL(dsn))

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è GORM
	var gormLogger logger.Interface
	if cfg.IsDevelopment() {
		gormLogger = logger.Default.LogMode(logger.Info)
		log.Println("üìù GORM logging enabled (development mode)")
	} else {
		gormLogger = logger.Default.LogMode(logger.Silent)
		log.Println("üìù GORM logging disabled (production mode)")
	}

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	DB, err = gorm.Open(postgres.Open(dsn), &gorm.Config{
		Logger: gormLogger,
	})

	if err != nil {
		log.Printf("‚ùå Failed to connect to database: %v", err)
		return fmt.Errorf("failed to connect to PostgreSQL database: %w", err)
	}

	log.Println("‚úÖ Connected to PostgreSQL database successfully")

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	sqlDB, err := DB.DB()
	if err != nil {
		log.Printf("‚ùå Failed to get database instance: %v", err)
		return fmt.Errorf("failed to get database instance: %w", err)
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	sqlDB.SetMaxIdleConns(10)
	sqlDB.SetMaxOpenConns(100)
	log.Println("‚úÖ Database connection pool configured")

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	if err := sqlDB.Ping(); err != nil {
		log.Printf("‚ùå Failed to ping database: %v", err)
		return fmt.Errorf("failed to ping database: %w", err)
	}

	log.Println("‚úÖ Database ping successful")

	// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
	log.Println("üîÑ Running database migrations...")
	if err := runMigrations(); err != nil {
		log.Printf("‚ùå Failed to run migrations: %v", err)
		return fmt.Errorf("failed to run migrations: %w", err)
	}

	log.Println("‚úÖ Database migrations completed")

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π
	log.Println("üîÑ Checking and creating default roles...")
	if err := createDefaultRoles(); err != nil {
		log.Printf("‚ùå Failed to create default roles: %v", err)
		return fmt.Errorf("failed to create default roles: %w", err)
	}

	log.Println("‚úÖ Default roles checked/created")

	// –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	log.Println("üîÑ Checking and creating default admin...")
	if err := createDefaultAdmin(); err != nil {
		log.Printf("‚ùå Failed to create default admin: %v", err)
		return fmt.Errorf("failed to create default admin: %w", err)
	}

	log.Println("‚úÖ Default admin checked/created")

	// –°–æ–∑–¥–∞–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	log.Println("üîÑ Checking and creating default shop owner...")
	if err := createDefaultShopOwner(); err != nil {
		log.Printf("‚ùå Failed to create default shop owner: %v", err)
		return fmt.Errorf("failed to create default shop owner: %w", err)
	}

	log.Println("‚úÖ Default shop owner checked/created")

	// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	if cfg.IsDevelopment() {
		log.Println("üîÑ Creating sample data (development mode)...")
		if err := createSampleData(); err != nil {
			log.Printf("‚ö†Ô∏è Warning: Failed to create sample data: %v", err)
			// –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
		} else {
			log.Println("‚úÖ Sample data created")
		}
	}

	log.Println("üéâ Database initialization completed successfully")
	return nil
}

// maskDatabaseURL –º–∞—Å–∫–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å –≤ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
func maskDatabaseURL(url string) string {
	// –ü—Ä–æ—Å—Ç–∞—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	if len(url) > 20 {
		return url[:20] + "***"
	}
	return "***"
}

// runMigrations –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func runMigrations() error {
	return DB.AutoMigrate(
		&models.Role{},
		&models.User{},
		&models.Category{},
		&models.Product{},
		&models.ProductVariation{},
		&models.CartItem{},
		&models.Favorite{},
		&models.Address{},
		&models.Order{},
		&models.OrderItem{},
		&models.Notification{},
		&models.UserSettings{},
	)
}

// createDefaultRoles —Å–æ–∑–¥–∞–µ—Ç —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
func createDefaultRoles() error {
	// –°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∞
	var superAdminRole models.Role
	if err := DB.Where("name = ?", "super_admin").First(&superAdminRole).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			superAdmin := models.Role{
				Name:        "super_admin",
				DisplayName: "–°—É–ø–µ—Ä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
				Description: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞, –≤–∫–ª—é—á–∞—è —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
				Permissions: `{"dashboard": true, "users": true, "products": true, "categories": true, "create_categories": true, "orders": true, "settings": true, "roles": true}`,
				IsActive:    true,
				IsSystem:    true,
			}
			if err := DB.Create(&superAdmin).Error; err != nil {
				return fmt.Errorf("failed to create super admin role: %w", err)
			}
			log.Println("‚úÖ Super admin role created")
		} else {
			return fmt.Errorf("failed to check super admin role: %w", err)
		}
	} else {
		log.Printf("‚úÖ Super admin role already exists: %s", superAdminRole.Name)
	}

	var adminRole models.Role
	if err := DB.Where("name = ?", "admin").First(&adminRole).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			admin := models.Role{
				Name:        "admin",
				DisplayName: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
				Description: "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã",
				Permissions: `{"dashboard": true, "users": true, "products": true, "categories": true, "orders": true, "settings": true}`,
				IsActive:    true,
				IsSystem:    true,
			}
			if err := DB.Create(&admin).Error; err != nil {
				return fmt.Errorf("failed to create admin role: %w", err)
			}
			log.Println("‚úÖ Admin role created")
		} else {
			return fmt.Errorf("failed to check admin role: %w", err)
		}
	} else {
		log.Printf("‚úÖ Admin role already exists: %s", adminRole.Name)
	}

	var shopOwnerRole models.Role
	if err := DB.Where("name = ?", "shop_owner").First(&shopOwnerRole).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			shopOwner := models.Role{
				Name:        "shop_owner",
				DisplayName: "–í–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞",
				Description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏, –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤",
				Permissions: `{"dashboard": true, "products": true, "categories": true, "orders": true, "settings": true}`,
				IsActive:    true,
				IsSystem:    true,
			}
			if err := DB.Create(&shopOwner).Error; err != nil {
				return fmt.Errorf("failed to create shop owner role: %w", err)
			}
			log.Println("‚úÖ Shop owner role created")
		} else {
			return fmt.Errorf("failed to check shop owner role: %w", err)
		}
	} else {
		log.Printf("‚úÖ Shop owner role already exists: %s", shopOwnerRole.Name)
	}

	var userRole models.Role
	if err := DB.Where("name = ?", "user").First(&userRole).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			user := models.Role{
				Name:        "user",
				DisplayName: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
				Description: "–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø–æ–∫—É–ø–∫–∞–º",
				Permissions: `{"profile": true, "orders": true, "favorites": true}`,
				IsActive:    true,
				IsSystem:    true,
			}
			if err := DB.Create(&user).Error; err != nil {
				return fmt.Errorf("failed to create user role: %w", err)
			}
			log.Println("‚úÖ User role created")
		} else {
			return fmt.Errorf("failed to check user role: %w", err)
		}
	} else {
		log.Printf("‚úÖ User role already exists: %s", userRole.Name)
	}

	return nil
}

// createDefaultAdmin —Å–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
func createDefaultAdmin() error {
	var adminUser models.User
	if err := DB.Where("email = ?", "admin@mm.com").First(&adminUser).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			// –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞
			var adminRole models.Role
			if err := DB.Where("name = ?", "admin").First(&adminRole).Error; err != nil {
				return fmt.Errorf("failed to find admin role: %w", err)
			}

			hashedPassword, _ := bcrypt.GenerateFromPassword([]byte("admin123"), bcrypt.DefaultCost)
			admin := models.User{
				Email:           "admin@mm.com",
				Password:        string(hashedPassword),
				Name:            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
				RoleID:          &adminRole.ID,
				IsActive:        true,
				IsEmailVerified: true,
			}
			if err := DB.Create(&admin).Error; err != nil {
				return fmt.Errorf("failed to create default admin user: %w", err)
			}
			log.Println("‚úÖ Default admin user created")
		} else {
			return fmt.Errorf("failed to check default admin user: %w", err)
		}
	} else {
		log.Printf("‚úÖ Default admin user already exists: %s", adminUser.Email)
	}

	return nil
}

// createSampleData —Å–æ–∑–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
func createSampleData() error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ–¥—É–∫—Ç—ã
	var count int64
	DB.Model(&models.Product{}).Count(&count)

	if count > 0 {
		log.Println("‚úÖ Sample data already seeded")
		return nil // –î–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å
	}

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	categories := []models.Category{
		{
			Name:        "–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
			Description: "–û–¥–µ–∂–¥–∞ –¥–ª—è –º—É–∂—á–∏–Ω",
			IconURL:     "https://example.com/icons/men.png",
			IsActive:    true,
			SortOrder:   1,
		},
		{
			Name:        "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
			Description: "–û–¥–µ–∂–¥–∞ –¥–ª—è –∂–µ–Ω—â–∏–Ω",
			IconURL:     "https://example.com/icons/women.png",
			IsActive:    true,
			SortOrder:   2,
		},
	}

	for _, category := range categories {
		if err := DB.Create(&category).Error; err != nil {
			return err
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	var menCategory, womenCategory models.Category
	DB.Where("name = ?", "–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞").First(&menCategory)
	DB.Where("name = ?", "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞").First(&womenCategory)

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
	products := []models.Product{
		{
			Name:        "–î–∂–∏–Ω—Å—ã –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ",
			Description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –¥–∂–∏–Ω—Å—ã –∏–∑ 100% —Ö–ª–æ–ø–∫–∞",
			Gender:      "unisex",
			CategoryID:  menCategory.ID,
			Brand:       "Levi's",
			IsAvailable: true,
		},
		{
			Name:        "–§—É—Ç–±–æ–ª–∫–∞ –±–∞–∑–æ–≤–∞—è",
			Description: "–ë–∞–∑–æ–≤–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ –∏–∑ —Ö–ª–æ–ø–∫–∞",
			Gender:      "unisex",
			CategoryID:  womenCategory.ID,
			Brand:       "Nike",
			IsAvailable: true,
		},
		{
			Name:        "–ö—Ä–æ—Å—Å–æ–≤–∫–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ",
			Description: "–£–¥–æ–±–Ω—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –¥–ª—è —Å–ø–æ—Ä—Ç–∞",
			Gender:      "unisex",
			CategoryID:  menCategory.ID,
			Brand:       "Adidas",
			IsAvailable: true,
		},
		{
			Name:        "–ü–ª–∞—Ç—å–µ –ª–µ—Ç–Ω–µ–µ",
			Description: "–õ–µ–≥–∫–æ–µ –ª–µ—Ç–Ω–µ–µ –ø–ª–∞—Ç—å–µ",
			Gender:      "female",
			CategoryID:  womenCategory.ID,
			Brand:       "Zara",
			IsAvailable: true,
		},
		{
			Name:        "–†—É–±–∞—à–∫–∞ –æ—Ñ–∏—Å–Ω–∞—è",
			Description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –æ—Ñ–∏—Å–Ω–∞—è —Ä—É–±–∞—à–∫–∞",
			Gender:      "male",
			CategoryID:  menCategory.ID,
			Brand:       "H&M",
			IsAvailable: true,
		},
	}

	// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
	for i := range products {
		if err := DB.Create(&products[i]).Error; err != nil {
			log.Printf("‚ùå Failed to create product %d: %v", i+1, err)
			continue
		}

		// –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
		variations := []models.ProductVariation{
			{
				ProductID:     products[i].ID,
				Sizes:         []string{"S", "M", "L"},
				Colors:        []string{"–ß–µ—Ä–Ω—ã–π", "–°–∏–Ω–∏–π"},
				Price:         2999.0,
				ImageURLs:     []string{"/images/products/jeans1.jpg", "/images/products/jeans1_2.jpg"},
				StockQuantity: 10,
				IsAvailable:   true,
				SKU:           "LEVI-001-BLACK-BLUE",
			},
			{
				ProductID:     products[i].ID,
				Sizes:         []string{"M", "L", "XL"},
				Colors:        []string{"–ë–µ–ª—ã–π", "–°–µ—Ä—ã–π"},
				Price:         2999.0,
				ImageURLs:     []string{"/images/products/jeans2.jpg", "/images/products/jeans2_2.jpg"},
				StockQuantity: 15,
				IsAvailable:   true,
				SKU:           "LEVI-001-WHITE-GRAY",
			},
		}

		for _, variation := range variations {
			if err := DB.Create(&variation).Error; err != nil {
				log.Printf("‚ùå Failed to create variation for product %s: %v", products[i].Name, err)
			}
		}
	}

	return nil
}

// createDefaultShopOwner —Å–æ–∑–¥–∞–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
func createDefaultShopOwner() error {
	var shopOwnerUser models.User
	if err := DB.Where("email = ?", "shopowner@mm.com").First(&shopOwnerUser).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			// –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞
			var shopOwnerRole models.Role
			if err := DB.Where("name = ?", "shop_owner").First(&shopOwnerRole).Error; err != nil {
				return fmt.Errorf("failed to find shop owner role: %w", err)
			}

			hashedPassword, _ := bcrypt.GenerateFromPassword([]byte("shopowner123"), bcrypt.DefaultCost)
			shopOwner := models.User{
				Email:           "shopowner@mm.com",
				Password:        string(hashedPassword),
				Name:            "–í–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞",
				RoleID:          &shopOwnerRole.ID,
				IsActive:        true,
				IsEmailVerified: true,
			}
			if err := DB.Create(&shopOwner).Error; err != nil {
				return fmt.Errorf("failed to create default shop owner user: %w", err)
			}
			log.Println("‚úÖ Default shop owner user created")
		} else {
			return fmt.Errorf("failed to check default shop owner user: %w", err)
		}
	} else {
		log.Printf("‚úÖ Default shop owner user already exists: %s", shopOwnerUser.Email)
	}

	return nil
}
