package middleware

import (
	"log"
	"net/http"
	"strings"

	"github.com/mm-api/mm-api/database"
	"github.com/mm-api/mm-api/models"
	"github.com/mm-api/mm-api/utils"
	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)

// AuthRequired –ø—Ä–æ–≤–µ—Ä—è–µ—Ç JWT —Ç–æ–∫–µ–Ω
func AuthRequired() gin.HandlerFunc {
	return func(c *gin.Context) {
		authHeader := c.GetHeader("Authorization")
		log.Printf("üîê AuthRequired: –∑–∞–ø—Ä–æ—Å –∫ %s, –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization: %s", c.Request.URL.Path, authHeader)

		if authHeader == "" {
			log.Printf("‚ùå AuthRequired: –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è %s", c.Request.URL.Path)
			c.JSON(http.StatusUnauthorized, gin.H{
				"error": "Authorization header required",
			})
			c.Abort()
			return
		}

		// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ "Bearer <token>"
		tokenString := strings.TrimPrefix(authHeader, "Bearer ")
		if tokenString == authHeader {
			c.JSON(http.StatusUnauthorized, gin.H{
				"error": "Invalid authorization header format",
			})
			c.Abort()
			return
		}

		// –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
		claims, err := utils.ValidateJWT(tokenString)
		if err != nil {
			c.JSON(http.StatusUnauthorized, gin.H{
				"error": "Invalid token",
			})
			c.Abort()
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
		var user models.User
		userID, err := uuid.Parse(claims.UserID)
		if err != nil {
			c.JSON(http.StatusUnauthorized, gin.H{
				"error": "Invalid user ID in token",
			})
			c.Abort()
			return
		}

		if err := database.DB.Preload("Role").First(&user, "id = ? AND is_active = ?", userID, true).Error; err != nil {
			c.JSON(http.StatusUnauthorized, gin.H{
				"error": "User not found or inactive",
			})
			c.Abort()
			return
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
		c.Set("user", user)
		c.Set("userID", user.ID)

		// –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
		log.Printf("üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (ID: %s, —Ä–æ–ª—å: %s) —É—Å–ø–µ—à–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω",
			user.Email, user.ID, user.Role.Name)

		c.Next()
	}
}

// AdminRequired –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
func AdminRequired() gin.HandlerFunc {
	return func(c *gin.Context) {
		user, exists := c.Get("user")
		if !exists {
			c.JSON(http.StatusUnauthorized, gin.H{
				"error": "User not found in context",
			})
			c.Abort()
			return
		}

		userModel := user.(models.User)
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å —á–µ—Ä–µ–∑ —Å–≤—è–∑—å —Å —Ç–∞–±–ª–∏—Ü–µ–π —Ä–æ–ª–µ–π
		if userModel.Role == nil || userModel.Role.Name != "admin" {
			c.JSON(http.StatusForbidden, gin.H{
				"error": "Admin access required",
			})
			c.Abort()
			return
		}

		c.Next()
	}
}

// ShopOwnerRequired –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞
func ShopOwnerRequired() gin.HandlerFunc {
	return func(c *gin.Context) {
		log.Printf("üè™ ShopOwnerRequired: –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è %s", c.Request.URL.Path)

		user, exists := c.Get("user")
		if !exists {
			log.Printf("‚ùå ShopOwnerRequired: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è %s", c.Request.URL.Path)
			c.JSON(http.StatusUnauthorized, gin.H{
				"error": "User not found in context",
			})
			c.Abort()
			return
		}

		userModel := user.(models.User)
		if userModel.Role == nil || (userModel.Role.Name != "shop_owner" && userModel.Role.Name != "admin") {
			c.JSON(http.StatusForbidden, gin.H{
				"error": "Shop owner access required",
			})
			c.Abort()
			return
		}

		c.Next()
	}
}

// SuperAdminRequired –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
func SuperAdminRequired() gin.HandlerFunc {
	return func(c *gin.Context) {
		user, exists := c.Get("user")
		if !exists {
			c.JSON(http.StatusUnauthorized, gin.H{
				"error": "User not found in context",
			})
			c.Abort()
			return
		}

		userModel := user.(models.User)
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å —á–µ—Ä–µ–∑ —Å–≤—è–∑—å —Å —Ç–∞–±–ª–∏—Ü–µ–π —Ä–æ–ª–µ–π
		if userModel.Role == nil || userModel.Role.Name != "super_admin" {
			c.JSON(http.StatusForbidden, gin.H{
				"error": "Super admin access required",
			})
			c.Abort()
			return
		}

		c.Next()
	}
}

// AdminOrShopOwnerRequired –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞
func AdminOrShopOwnerRequired() gin.HandlerFunc {
	return func(c *gin.Context) {
		user, exists := c.Get("user")
		if !exists {
			c.JSON(http.StatusUnauthorized, gin.H{
				"error": "User not found in context",
			})
			c.Abort()
			return
		}

		userModel := user.(models.User)
		if userModel.Role == nil || (userModel.Role.Name != "admin" && userModel.Role.Name != "shop_owner") {
			c.JSON(http.StatusForbidden, gin.H{
				"error": "Admin or shop owner access required",
			})
			c.Abort()
			return
		}

		c.Next()
	}
}

// AdminOrSuperAdminRequired –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –∏–ª–∏ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∞
func AdminOrSuperAdminRequired() gin.HandlerFunc {
	return func(c *gin.Context) {
		user, exists := c.Get("user")
		if !exists {
			c.JSON(http.StatusUnauthorized, gin.H{
				"error": "User not found in context",
			})
			c.Abort()
			return
		}

		userModel := user.(models.User)
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å —á–µ—Ä–µ–∑ —Å–≤—è–∑—å —Å —Ç–∞–±–ª–∏—Ü–µ–π —Ä–æ–ª–µ–π
		if userModel.Role == nil || (userModel.Role.Name != "admin" && userModel.Role.Name != "super_admin") {
			c.JSON(http.StatusForbidden, gin.H{
				"error": "Admin or super admin access required",
			})
			c.Abort()
			return
		}

		c.Next()
	}
}

// GetCurrentUser –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
func GetCurrentUser(c *gin.Context) (models.User, bool) {
	user, exists := c.Get("user")
	if !exists {
		return models.User{}, false
	}
	return user.(models.User), true
}
