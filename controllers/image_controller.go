package controllers

import (
	"log"
	"net/http"
	"strings"

	"github.com/mm-api/mm-api/database"
	"github.com/mm-api/mm-api/models"
	"github.com/gin-gonic/gin"
)

type ImageController struct{}

// FixImageURLs –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
func (ic *ImageController) FixImageURLs(c *gin.Context) {
	log.Printf("üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
	var products []models.Product
	if err := database.DB.Preload("Variations").Find(&products).Error; err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": "Failed to load products",
		})
		return
	}

	fixedCount := 0
	totalImages := 0

	// –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º
	for _, product := range products {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞
		for i, variation := range product.Variations {
			if len(variation.ImageURLs) > 0 {
				totalImages += len(variation.ImageURLs)

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π URL
				for j, imageURL := range variation.ImageURLs {
					if imageURL != "" {
						// –ï—Å–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URL –Ω–∞ /images/ ‚Äî –¥–µ–ª–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º
						if strings.HasPrefix(imageURL, "http://") || strings.HasPrefix(imageURL, "https://") {
							if strings.Contains(imageURL, "/images/") {
								// –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å /images/... –∏–∑ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ URL
								parts := strings.Split(imageURL, "/images/")
								if len(parts) > 1 {
									newURL := "/images/" + parts[1]
									product.Variations[i].ImageURLs[j] = newURL
									fixedCount++
									log.Printf("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω URL: %s -> %s", imageURL, newURL)
								}
							}
						}
					}
				}
			}
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
		if err := database.DB.Save(&product).Error; err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ %s: %v", product.ID, err)
		}
	}

	log.Printf("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ %d –∏–∑ %d –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", fixedCount, totalImages)

	c.JSON(http.StatusOK, gin.H{
		"success":     true,
		"message":     "Image URLs fixed successfully",
		"fixedCount":  fixedCount,
		"totalImages": totalImages,
	})
}

// GetImageURL –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
func (ic *ImageController) GetImageURL(c *gin.Context) {
	filename := c.Param("filename")
	folder := c.DefaultQuery("folder", "uploads")

	if filename == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Filename is required",
		})
		return
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ UploadController
	uploadController := &UploadController{}
	imageURL := uploadController.GetImageURL(filename, folder)

	c.JSON(http.StatusOK, gin.H{
		"url": imageURL,
	})
}
