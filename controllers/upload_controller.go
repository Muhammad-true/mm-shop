package controllers

import (
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strings"

	"github.com/mm-api/mm-api/config"
	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)

type UploadController struct{}

// GetImageURL –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
func (uc *UploadController) GetImageURL(filename, folder string) string {
	// –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è same-origin –∑–∞–ø—Ä–æ—Å–æ–≤
	// nginx –±—É–¥–µ—Ç –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞—Ç—å /images/ –∫ API
	return fmt.Sprintf("/images/%s/%s", folder, filename)
}

// UploadImage –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
func (uc *UploadController) UploadImage(c *gin.Context) {
	log.Printf("üì∏ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ POST –∑–∞–ø—Ä–æ—Å
	if c.Request.Method != "POST" {
		log.Printf("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥: %s", c.Request.Method)
		c.JSON(http.StatusMethodNotAllowed, gin.H{
			"error": "Method not allowed",
		})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ —Ñ–æ—Ä–º—ã
	file, header, err := c.Request.FormFile("image")
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "No image file provided",
			"details": err.Error(),
		})
		return
	}
	defer file.Close()

	log.Printf("üìÅ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: %s, —Ä–∞–∑–º–µ—Ä: %d –±–∞–π—Ç", header.Filename, header.Size)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
	contentType := header.Header.Get("Content-Type")
	log.Printf("üìã Content-Type: %s", contentType)

	if !strings.HasPrefix(contentType, "image/") {
		log.Printf("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: %s", contentType)
		c.JSON(http.StatusBadRequest, gin.H{
			"error":       "File is not an image",
			"contentType": contentType,
		})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
	cfg := config.GetConfig()
	maxSizeStr := cfg.UploadMaxSize
	maxSize := int64(50 * 1024 * 1024) // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 50MB

	// –ü–∞—Ä—Å–∏–º —Ä–∞–∑–º–µ—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	if strings.HasSuffix(maxSizeStr, "MB") {
		var mb int
		fmt.Sscanf(maxSizeStr, "%dMB", &mb)
		maxSize = int64(mb) * 1024 * 1024
	} else if strings.HasSuffix(maxSizeStr, "KB") {
		var kb int
		fmt.Sscanf(maxSizeStr, "%dKB", &kb)
		maxSize = int64(kb) * 1024
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
	if header.Size > maxSize {
		log.Printf("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: %d –±–∞–π—Ç (–º–∞–∫—Å–∏–º—É–º %d –±–∞–π—Ç)", header.Size, maxSize)
		c.JSON(http.StatusRequestEntityTooLarge, gin.H{
			"error":   fmt.Sprintf("File size too large (max %s)", maxSizeStr),
			"size":    header.Size,
			"maxSize": maxSize,
		})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
	ext := filepath.Ext(header.Filename)
	if ext == "" {
		ext = ".jpg" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
	allowedExts := []string{".jpg", ".jpeg", ".png", ".gif", ".webp", ".JPG", ".JPEG", ".PNG", ".GIF", ".WEBP"}
	isAllowed := false
	for _, allowedExt := range allowedExts {
		if strings.EqualFold(ext, allowedExt) {
			isAllowed = true
			break
		}
	}

	if !isAllowed {
		log.Printf("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: %s", ext)
		c.JSON(http.StatusBadRequest, gin.H{
			"error":     "Unsupported file extension",
			"extension": ext,
			"allowed":   allowedExts,
		})
		return
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
	filename := fmt.Sprintf("%s%s", uuid.New().String(), ext)
	log.Printf("üÜî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞: %s", filename)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
	folder := c.DefaultQuery("folder", "uploads")
	uploadDir := fmt.Sprintf("images/%s", folder)
	log.Printf("üìÇ –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %s", uploadDir)

	// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
	if err := os.MkdirAll(uploadDir, 0755); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to create upload directory",
			"details": err.Error(),
		})
		return
	}

	// –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
	filePath := filepath.Join(uploadDir, filename)
	log.Printf("üíæ –ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %s", filePath)

	// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
	dst, err := os.Create(filePath)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to create file",
			"details": err.Error(),
		})
		return
	}
	defer dst.Close()

	// –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
	bytesWritten, err := io.Copy(dst, file)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to save file",
			"details": err.Error(),
		})
		return
	}

	log.Printf("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: %d –±–∞–π—Ç –∑–∞–ø–∏—Å–∞–Ω–æ", bytesWritten)

	// –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
	fileURL := uc.GetImageURL(filename, folder)
	log.Printf("üîó URL —Ñ–∞–π–ª–∞: %s", fileURL)

	c.JSON(http.StatusOK, gin.H{
		"success":  true,
		"url":      fileURL,
		"filename": filename,
		"size":     bytesWritten,
		"folder":   folder,
	})
}

// DeleteImage —É–¥–∞–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
func (uc *UploadController) DeleteImage(c *gin.Context) {
	filename := c.Param("filename")
	if filename == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Filename is required",
		})
		return
	}

	folder := c.DefaultQuery("folder", "uploads")
	filePath := filepath.Join("images", folder, filename)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
	if _, err := os.Stat(filePath); os.IsNotExist(err) {
		c.JSON(http.StatusNotFound, gin.H{
			"error": "File not found",
		})
		return
	}

	// –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
	if err := os.Remove(filePath); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": "Failed to delete file",
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"message": "File deleted successfully",
	})
}
