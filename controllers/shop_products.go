package controllers

import (
	"log"
	"net/http"
	"strconv"

	"github.com/mm-api/mm-api/database"
	"github.com/mm-api/mm-api/models"

	"github.com/gin-gonic/gin"
)

// GetShopProducts –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞ (—Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ owner_id)
func (pc *ProductController) GetShopProducts(c *gin.Context) {
	var products []models.Product
	query := database.DB.Model(&models.Product{})

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	currentUser, exists := c.Get("user")
	if !exists {
		log.Printf("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ!")
		c.JSON(http.StatusUnauthorized, gin.H{
			"error": "User not authenticated",
		})
		return
	}

	user := currentUser.(models.User)
	log.Printf("üè™ –í–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞ %s (ID: %s, email: %s) –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã", user.Name, user.ID, user.Email)

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã —Ç–æ–ª—å–∫–æ –ø–æ OwnerID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	query = query.Where("owner_id = ?", user.ID)

	// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	if category := c.Query("category"); category != "" {
		query = query.Where("category_id = ?", category)
	}

	// –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
	if search := c.Query("search"); search != "" {
		query = query.Where("name ILIKE ? OR description ILIKE ?", "%"+search+"%", "%"+search+"%")
	}

	// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
	sortBy := c.DefaultQuery("sort_by", "created_at")
	sortOrder := c.DefaultQuery("sort_order", "desc")
	allowedSorts := map[string]bool{
		"name":       true,
		"price":      true,
		"created_at": true,
	}

	if allowedSorts[sortBy] {
		if sortOrder == "asc" {
			query = query.Order(sortBy + " ASC")
		} else {
			query = query.Order(sortBy + " DESC")
		}
	}

	// –ü–∞–≥–∏–Ω–∞—Ü–∏—è
	page, _ := strconv.Atoi(c.DefaultQuery("page", "1"))
	limit, _ := strconv.Atoi(c.DefaultQuery("limit", "20"))

	if page < 1 {
		page = 1
	}
	if limit < 1 || limit > 100 {
		limit = 20
	}

	offset := (page - 1) * limit

	// –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
	var total int64
	query.Count(&total)

	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–µ–π
	if err := query.Offset(offset).Limit(limit).Preload("Variations").Preload("Category").Find(&products).Error; err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": "Failed to fetch shop products",
		})
		return
	}

	log.Printf("üè™ –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞ %s", len(products), user.Email)

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ—Ç–≤–µ—Ç
	var responseProducts []models.ProductResponse
	for _, product := range products {
		responseProducts = append(responseProducts, product.ToResponse())
	}

	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"data": gin.H{
			"products": responseProducts,
			"total":    total,
			"page":     page,
			"limit":    limit,
		},
		"message": "Shop products loaded successfully",
	})
}
