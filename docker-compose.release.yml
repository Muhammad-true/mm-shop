# MM Shop - Production Release
# ============================

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mm-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: mm_shop_prod
      POSTGRES_USER: mm_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-muhammadjon}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mm_user -d mm_shop_prod"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mm-redis-prod
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - mm-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # MM API
  api:
    build:
      context: .
      dockerfile: Dockerfile.api.release
    container_name: mm-api-prod
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - GIN_MODE=release
      - DATABASE_URL=postgres://mm_user:muhammadjon@postgres:5432/mm_shop_prod?sslmode=disable
      - REDIS_URL=redis://redis:6379/0
      - CORS_ALLOW_ORIGINS=*
      - PUBLIC_HOST=159.89.99.252
      - JWT_SECRET=${JWT_SECRET:-moya-super-secretnaya-fraza-dlya-api-777}
    volumes:
      - ./images:/app/images
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mm-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MM Admin Panel
  admin:
    build:
      context: .
      dockerfile: Dockerfile.admin.release
    container_name: mm-admin-prod
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - mm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  mm-network:
    driver: bridge

