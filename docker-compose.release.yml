# MM Shop - Production Release
# ============================
# Отдельные контейнеры для API и админки

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mm-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: mm_shop_prod
      POSTGRES_USER: mm_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-muhammadjon}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mm_user -d mm_shop_prod"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mm-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mm-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MM API (отдельный контейнер)
  api:
    build:
      context: .
      dockerfile: Dockerfile.api.release
    container_name: mm-api-prod
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - GIN_MODE=release
      - LOG_LEVEL=warn
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://159.89.99.252,http://localhost}
    volumes:
      - ./images:/app/images
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mm-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MM Admin Panel (отдельный контейнер)
  admin:
    build:
      context: .
      dockerfile: Dockerfile.admin.release
    container_name: mm-admin-prod
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - mm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PgAdmin (опционально)
  pgadmin:
    image: dpage/pgadmin4
    container_name: mm-pgadmin-prod
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@mm-api.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
    ports:
      - "8081:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mm-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  mm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
